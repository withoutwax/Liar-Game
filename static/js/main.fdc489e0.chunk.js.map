{"version":3,"sources":["Components/Intro.js","Components/Setting.js","Components/Select.js","Components/Timer.js","Components/Play.js","Components/Finish.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Intro","className","to","Setting","props","setPlayerNum","event","setState","playerNum","Number","target","value","setTimer","timer","spyModeSelect","console","log","type","checked","spyMode","setTheme","theme","themeKr","textContent","updateGlobalState","parentCallbackState","state","startGameButton","this","onClick","onChange","style","fontSize","React","Component","Select","componentWillMount","globalState","vocab","playerState","componentDidMount","data","require","kr","randomIndex","Math","floor","random","length","chooseLiar","liar","showCard","button","id","buttonDisabled","includes","concat","displayStatus","showCardStatus","resetDisplayStatus","beginGame","nextStage","setVocab","buttonDisabledText","textView","playersCard","i","push","disabled","key","nextButton","Timer","seconds","globalTimer","startTimer","countDown","clearInterval","timerCheck","setInterval","timerColor","Play","checkTimerEnds","displayStatus02","findLiar","liarStatus","status","findLiarButton","map","element","Finish","guessWords","headerText","liarGuess","guess","liarGuessText","liarWin","guessCards","word","newGame","headerColor","Game","progressNextStage","stage","updateGlobalVocab","gameView","App","setting","basename","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdc489e0.chunk.js","sourcesContent":["import React from 'react';\nimport \"../scss/Intro.scss\";\n\nimport  { Link } from 'react-router-dom';\n\nfunction Intro() {\n    return (\n        <section className=\"intro-container\">\n            <h1>Liar Game</h1>\n            <p>누가 거짓말을 하고 있을까요?</p>\n            <Link to='/setting'>게임하기</Link>\n        </section>\n    );\n}\n\nexport default Intro;","import React from 'react';\nimport '../scss/Setting.scss';\nimport { Link } from 'react-router-dom';\n\nclass Setting extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerNum: 3,\n            timer: 120,\n            spyMode: false,\n            theme: \"\",\n            themeKr: \"\"\n        }\n    }\n\n    setPlayerNum = (event) => {\n        this.setState({playerNum: Number(event.target.value)});\n    }\n    setTimer = (event) => {\n        this.setState({timer: Number(event.target.value)});\n    }\n    spyModeSelect = (event) => {\n        // console.log(this.state.spyMode);\n        console.log(event.target.type);\n        let value = event.target.type === \"checkbox\" ? event.target.checked : event.target.value;\n\n        this.setState({\n            spyMode: value\n        });\n    }\n    setTheme = (event) => {\n        // console.log(event.target.textContent);\n        this.setState({\n            theme: event.target.value,\n            themeKr: event.target.textContent\n        });\n    }\n\n    updateGlobalState = () => {\n        this.props.parentCallbackState(this.state);\n    }\n\n    render() {\n        \n        // Display 게임 시작! button when the user chooses the theme.\n        let startGameButton = this.state.theme !== \"\" ? (<Link to='/game' onClick={this.updateGlobalState}>게임시작!</Link>) : ``;\n\n        return (\n            <section className=\"setting-container\">\n                <h1>설정 창</h1>\n\n                <form className=\"setting-form\">\n                    <label className=\"player-num\">\n                        <h2>참여인원:</h2>\n                        <select value={this.state.value} onChange={this.setPlayerNum}>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </select>\n                    </label>\n                    <label className=\"set-timer\">\n                        <h2>참여인원:</h2>\n                        <select value={this.state.value} onChange={this.setTimer}>\n                            <option value=\"60\">60 초</option>\n                            <option value=\"90\">90 초</option>\n                            <option value=\"120\">120 초 (2분)</option>\n                            <option value=\"150\">150 초 (2분 30초)</option>\n                            <option value=\"180\">180 초 (3분)</option>\n                            <option value=\"240\">240 초 (4분)</option>\n                            <option value=\"300\">300 초 (5분)</option>\n                        </select>\n                    </label>\n                    <label className=\"spy-mode\">\n                        <span className=\"caption\" style={{fontSize:1+'rem'}}>**스파이 모드는 준비 중입니다!**</span>\n                        {/* {`스파이 모드: ${this.state.spyMode}`}\n                        <input \n                            name=\"spyMode\"\n                            type=\"checkbox\"\n                            checked={this.state.spyMode}\n                            onChange={this.spyModeSelect}\n                        /> */}\n                    </label>\n                </form>\n\n                <div className=\"theme-select\">\n                    <h2>주제: {`${this.state.themeKr}`}</h2>\n                    <button value=\"food\" onClick={this.setTheme}>음식</button>\n                    <button value=\"place\" onClick={this.setTheme}>장소</button>\n                    <button value=\"occupation\" onClick={this.setTheme}>직업</button>\n                    <button value=\"biblecharacter\" onClick={this.setTheme}>성경인물</button>\n                </div>\n                \n                <div>\n                    {startGameButton}\n                </div>\n                \n            </section>\n            );\n    }\n}\n\nexport default Setting;","import React from 'react';\n\nclass Select extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerNum: null,\n            spyMode: null,\n            theme: \"\",\n            vocab: \"\",\n            liar: 1,\n            buttonDisabled: [],\n            displayStatus: \"플레이어를 선택해주세요\",\n            buttonDisabledText: \"확인했습니다!\",\n            beginGame: false,\n            showCardStatus: false\n        }\n    }\n\n    // Update State\n    componentWillMount = () => {\n        // TODO: Uncomment after testing. This code updates data with Global Setting\n        if (this.props.globalState.playerNum === \"\" || this.props.globalState.theme === \"\") {\n            this.setState({\n                playerNum: 3,\n                spyMode: false,\n                theme: \"food\",\n                vocab: \"\",\n                playerState: false\n            });\n        } else {\n            this.setState({\n                playerNum: this.props.globalState.playerNum,\n                spyMode: this.props.globalState.spyMode,\n                theme: this.props.globalState.theme\n            });\n        }\n    }\n\n    componentDidMount = () => {\n        const chosenTheme = {\n            \"food\": require('../data/food.json'),\n            \"place\": require('../data/place.json'),\n            \"occupation\": require('../data/occupation.json'),\n            \"biblecharacter\": require('../data/biblecharacter.json')\n        }\n        let data = chosenTheme[this.state.theme].kr; // Currently only set to Korean\n\n        // Generate a random number to choose the menu\n        let randomIndex = Math.floor(Math.random() * data.length);\n        let chooseLiar = Math.floor(Math.random() * this.state.playerNum);\n\n        this.setState({ \n            vocab: data[randomIndex],\n            liar: chooseLiar\n        });\n    }\n    showCard = (event) => {\n        let button = Number(event.target.id);\n        \n        if (this.state.buttonDisabled.includes(button) === false) {\n\n            this.setState({\n                buttonDisabled: this.state.buttonDisabled.concat(button)\n            });\n        }\n\n        let card = event.target.className;\n        \n        if (card.includes(\"no-liar\")) {\n            this.setState({\n                displayStatus: `당신은 라이어가 아닙니다. 이번에 선택된 단어는:`,\n                playerState: false\n            });\n        } else {\n            this.setState({\n                displayStatus: `당신은`,\n                playerState: true\n            });\n        }\n\n        // Hide player select card during check\n        this.setState({\n            showCardStatus: true\n        })\n    }\n\n    resetDisplayStatus = (event) => {\n        if (this.state.buttonDisabled.length === this.state.playerNum) {\n            // All Player has been selected\n            console.log(\"모든 플레이어가 선택 되었습니다\");\n\n            // Begin Timer\n            this.setState({ \n                displayStatus: \"게임이 시작되었습니다!\",\n                beginGame: true \n            });\n            this.props.nextStage(2);\n            this.props.setVocab(this.state.vocab);\n            \n        } else {\n            if (this.state.playerNum - this.state.buttonDisabled.length === 1) {\n                console.log(\"One player left\");\n                this.setState({buttonDisabledText: \"게임 시작!\"});\n            }\n            this.setState({displayStatus: \"플레이어를 선택해주세요\"})\n        }\n\n        // Show player select card after check\n        this.setState({\n            showCardStatus: false\n        });\n    }\n\n    render() {\n        console.log(\"render()\");\n        // console.log(\"PROPS:\", this.props);\n        let defaultText = \"선택하세요\";\n        // console.log(this.state.buttonDisabled.includes(0));\n        console.log(\"THIS.STATE\", this.state);\n        \n        let playersCard = []\n        for (let i = 0; i < this.state.playerNum; i++) {\n            if (i === this.state.liar) {\n                playersCard.push(<button className={`playersCard liar ${this.state.buttonDisabled.includes(i) ? 'disabled' : ''}`} disabled={this.state.buttonDisabled.includes(i) ? true : false} key={i} id={i} onClick={this.showCard}>{defaultText}</button>)\n            } else {\n                playersCard.push(<button className={`playersCard no-liar ${this.state.buttonDisabled.includes(i) ? 'disabled' : ''}`} disabled={this.state.buttonDisabled.includes(i) ? true : false} key={i} id={i} onClick={this.showCard}>{defaultText}</button>)\n            }\n        }\n        console.log(this.state.buttonDisabled.length);\n        let textView;\n        if (this.state.buttonDisabled.length > 0 && this.state.showCardStatus === true) {\n            textView = this.state.playerState ? <span className=\"red\">라이어 입니다.</span> : <span className=\"green\"><br/>{this.state.vocab}</span>;\n        } else {\n            textView = null;\n        }\n        let nextButton = this.state.displayStatus === \"플레이어를 선택해주세요\" ? `` : <button onClick={this.resetDisplayStatus}>{this.state.buttonDisabledText}</button>;\n\n        return (\n            <div>\n                <div>\n                    <h2>{this.state.displayStatus} {textView}</h2>\n                    { nextButton }\n                </div>\n                {this.state.showCardStatus ? '' : playersCard }\n            </div>\n        );\n    }\n}\n\nexport default Select;","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 120\n        }\n        this.timer = 0;\n    }\n    componentWillMount = () => {\n        this.setState({\n            seconds: this.props.globalTimer\n        })\n    }\n    componentDidMount = () => {\n        this.startTimer();\n    }\n    \n    countDown = () => {\n        let seconds = this.state.seconds - 1;\n        this.setState({ seconds: seconds });\n\n        if (seconds === 0) {\n            clearInterval(this.timer);\n            this.props.timerCheck(false);\n        }\n    }\n\n    startTimer = () => {\n        this.timer = setInterval(this.countDown, 1000);\n    }\n\n    render() {\n        let timerColor = this.state.seconds <= 20 ? \"red\" : \"\";\n        return(\n            <div>\n                <p><span className={timerColor}>{this.state.seconds}</span> 초</p>\n            </div>\n        );\n    }\n}\n\nexport default Timer;","import React from 'react';\nimport Timer from './Timer';\n\nclass Play extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            displayStatus: \"게임 시작!\",\n            displayStatus02: \"게임이 시작되었습니다! 라이어를 찾아주세요!\",\n            findLiar: false\n        }\n        \n    }\n\n    checkTimerEnds = (timer) => {\n        console.log(\"Check Timer\", timer);\n\n        this.setState({\n            displayStatus: \"시간이 다 되었습니다! 라이어를 지목해주세요!\",\n            displayStatus02: \"\",\n            findLiar: true\n        });\n    }\n\n    liarStatus = (status) => {\n        console.log(status.target.value);\n        switch(status.target.value) {\n            case \"liar-found\":\n                this.props.nextStage(3);\n                break;\n            case \"liar-not-found\":\n                this.props.nextStage(4);\n                break;\n            default:\n                this.props.nextStage(4);\n                break;\n        }\n        \n    }\n\n    render() {\n        let findLiarButton01 = <button key=\"1\" value=\"liar-found\" onClick={this.liarStatus}>라이어를 찾았습니다!</button>;\n        let findLiarButton02 = <button key=\"2\" value=\"liar-not-found\" onClick={this.liarStatus}>라이어를 찾지 못했습니다!</button>;\n        let findLiarButton = [findLiarButton01, findLiarButton02];\n        return (\n            <div>\n                <h1>{this.state.displayStatus}</h1>\n                <p>{this.state.displayStatus02}</p>\n                <Timer timerCheck={this.checkTimerEnds} globalTimer={this.props.globalTimer}/>\n                {this.state.findLiar ? findLiarButton.map(element => { return element}) : ''}\n            </div>\n        );\n    }\n}\n\nexport default Play;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../scss/Finish.scss';\n\nclass Finish extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            liarStatus: \"\",\n            vocab: \"\",\n            theme: \"\",\n            guessWords: [],\n            liarGuess: false,\n            liarGuessText: \"\",\n            headerText: \"라이어는 단어를 선택해주세요\",\n            liarWin: true\n        }\n    }\n\n    componentWillMount = () => {\n        this.setState({\n            liarStatus: this.props.liarStatus,\n            vocab: this.props.vocab,\n            theme: this.props.theme\n        });\n    }\n    componentDidMount = () => {\n        if (this.state.liarStatus === \"found\"){\n            const chosenTheme = {\n                \"food\": require('../data/food.json'),\n                \"place\": require('../data/place.json'),\n                \"occupation\": require('../data/occupation.json'),\n                \"biblecharacter\": require('../data/biblecharacter.json')\n            }\n            let data = chosenTheme[this.state.theme].kr; // Currently only set to Korean\n            this.setState({guessWords: this.state.guessWords.concat(data)});\n        } else {\n            this.setState({\n                headerText: \"축하합니다. 라이어를 잡았습니다!\",\n                liarGuess: true\n            });\n        }\n        \n    }\n\n    liarGuess = (guess) => {\n        console.log(guess.target.value, this.state.vocab);\n        if (guess.target.value === this.state.vocab) {\n            this.setState({\n                liarGuessText: \"축하합니다! 선택한 단어가 맞습니다!\",\n                headerText: \"라이어 승\",\n                liarWin: true\n            });\n        } else {\n            this.setState({\n                liarGuessText: `아쉽습니다! 선택한 단어가 틀렸습니다! 선택된 단어는: ${this.state.vocab}`,\n                headerText: \"라이어 패\",\n                liarWin: false\n            });\n        }\n        this.setState({\n            liarGuess: true,\n        });\n    }\n    \n    render() {\n        console.log(this.state);\n        let guessCards = this.state.guessWords.map(word => {return <button className=\"guess-cards\" key={word} value={word} onClick={this.liarGuess}>{word}</button>})\n        let newGame = <Link to='/setting'>새 게임하기</Link>\n        console.log(this.state.liarGuess);\n        let headerColor = 'white'\n        if (this.state.liarGuess) {\n            headerColor = this.state.liarWin ? 'green' : 'red';\n        }\n        return (\n            <div className=\"finish-container\">\n                <h2 className={headerColor}>{this.state.headerText}</h2>\n                <p>{this.state.liarGuessText}</p>\n                <div className=\"guess-card-container\">{this.state.liarGuess ? newGame : guessCards}</div>\n            </div>\n        );\n    }\n}\n\nexport default Finish;","import React from 'react';\nimport Select from './Select';\nimport Play from './Play';\nimport Finish from './Finish';\nimport '../scss/Game.scss';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerNum: null,\n            timer: null,\n            spyMode: null,\n            theme: \"\",\n            stage: 1,\n            vocab: \"\"\n        }\n    }\n\n    componentWillMount = () => {\n        // TODO: Uncomment after testing. This code updates data with Global Setting\n        if (this.props.globalState.playerNum === \"\" || this.props.globalState.theme === \"\") {\n            this.setState({\n                playerNum: 3,\n                timer: 120,\n                spyMode: false,\n                theme: \"food\"\n            });\n        } else {\n            this.setState({\n                playerNum: this.props.globalState.playerNum,\n                timer: this.props.globalState.timer,\n                spyMode: this.props.globalState.spyMode,\n                theme: this.props.globalState.theme\n            });\n        }\n    }\n\n    progressNextStage = (stage) => {\n        this.setState({stage: stage});\n    }\n\n    updateGlobalVocab = (vocab) => {\n        this.setState({vocab: vocab});\n    }\n\n    render() {\n        let gameView;\n\n        switch(this.state.stage) {\n            case 1:\n                gameView = <Select globalState={this.state} nextStage={this.progressNextStage} setVocab={this.updateGlobalVocab}/>;\n                break;\n            case 2:\n                gameView = <Play nextStage={this.progressNextStage} globalTimer={this.state.timer}/>;\n                break;\n            case 3:\n                gameView = <Finish nextStage={this.progressNextStage} liarStatus='found' vocab={this.state.vocab} theme={this.state.theme} />\n                break;\n            case 4:\n                gameView = <Finish nextStage={this.progressNextStage} liarStatus='not-found' vocab={this.state.vocab} theme={this.state.theme} />\n                break;\n        }\n\n        return (\n            <div>\n                {/* <h1>게임화면</h1> */}\n                { gameView }\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.scss';\n\nimport Intro from './Components/Intro';\nimport Setting from './Components/Setting';\nimport Game from './Components/Game';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerNum: null,\n      timer: null,\n      spyMode: false,\n      theme: \"\"\n    }\n  }\n\n  updateGlobalState = (setting) => {\n    this.setState({\n      playerNum: setting.playerNum,\n      timer: setting.timer,\n      spyMode: setting.spyMode,\n      theme: setting.theme\n    });\n  }\n\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={Intro} />\n          <Route path=\"/setting/\" render={(props) => <Setting parentCallbackState={this.updateGlobalState} {...props} />} />\n          <Route path=\"/game/\" render={(props) => <Game globalState={this.state} {...props}/>} />\n        </div>\n      </HashRouter>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './Main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}