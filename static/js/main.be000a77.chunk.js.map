{"version":3,"sources":["Components/Intro.js","Components/Setting.js","Components/Select.js","Components/Timer.js","Components/Play.js","Components/Finish.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Intro","props","easterEgg","console","log","setState","easterEggMode","specialCode","input","target","value","state","code01","codeActivated","codeActivatedText","parentCallbackEasterEgg","headlineText","className","onClick","this","style","fontSize","placeholder","onChange","to","React","Component","Setting","componentWillMount","globalState","setPlayerNum","event","playerNum","Number","setTimer","timer","spyModeSelect","type","checked","spyMode","setTheme","theme","themeKr","textContent","updateGlobalState","parentCallbackState","startGameButton","Select","vocab","playerState","componentDidMount","data","require","kr","generateRandomNumber","randomIndex","Math","floor","random","length","chooseLiar","liar","showCard","button","id","buttonDisabled","includes","concat","displayStatus","showCardStatus","resetDisplayStatus","beginGame","nextStage","setVocab","buttonDisabledText","textView","playersCard","i","push","disabled","key","nextButton","Timer","globalTimer","seconds","unlimited","timerCheck","startTimer","countDown","clearInterval","setInterval","timerColor","Play","checkTimerEnds","text","displayStatus02","findLiar","liarStatus","status","findLiarButton","map","element","Finish","guessWords","headerText","liarGuess","guess","liarGuessText","liarWin","guessCards","word","newGame","headerColor","Game","progressNextStage","stage","updateGlobalVocab","gameView","App","activateEasterEgg","code","setting","basename","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be000a77.chunk.js","sourcesContent":["import React from 'react';\nimport \"../scss/Intro.scss\";\n\nimport  { Link } from 'react-router-dom';\n\nclass Intro extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            headlineText: 'Game',\n            easterEggMode: false,\n            code01: 'onnuri',\n            codeActivated: false,\n            codeActivatedText: ''\n        }\n    }\n    \n    easterEgg = () => {\n        console.log('You have discovered an Easter Egg 🥚 !');\n        this.setState({ easterEggMode: true });\n    }\n    specialCode = (input) => {\n        if (input.target.value === this.state.code01) {\n            console.log('Activated');\n            this.setState({ \n                codeActivated: true,\n                codeActivatedText: \"온누리 모드 Activated\"\n             });\n             this.props.parentCallbackEasterEgg(this.state.code01);\n        }\n    }\n\n    render() {\n        return (\n            <section className=\"intro-container\">\n                <h1>Liar <span onClick={this.easterEgg} style={{ fontSize: '3rem' }}>{ this.state.headlineText }</span></h1>\n                <p>누가 거짓말을 하고 있을까요?</p>\n                {this.state.easterEggMode ? <input className=\"easterEggInput\" placeholder=\"코드를 입력하세요\" onChange={this.specialCode}></input> : ''}\n                {this.state.codeActivated ? <p className=\"green\">{this.state.codeActivatedText}</p> : ''}\n                <Link to='/setting'>게임하기</Link>\n            </section>\n        );\n    }\n    \n}\n\nexport default Intro;","import React from 'react';\nimport '../scss/Setting.scss';\nimport { Link } from 'react-router-dom';\n\nclass Setting extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerNum: 3,\n            timer: 60,\n            spyMode: false,\n            theme: \"\",\n            themeKr: \"\",\n            easterEgg: \"\"\n        }\n    }\n\n    componentWillMount = () => {\n        if (this.props.globalState.easterEgg !== \"\") {this.setState({easterEgg:this.props.globalState.easterEgg})};\n        console.log(this.props.globalState.easterEgg);\n    }\n\n    setPlayerNum = (event) => {\n        this.setState({playerNum: Number(event.target.value)});\n    }\n    setTimer = (event) => {\n        if (event.target.value === \"unlimited\") {\n            this.setState({timer: event.target.value});\n        } else {\n            this.setState({timer: Number(event.target.value)});\n        }\n    }\n    spyModeSelect = (event) => {\n        // console.log(this.state.spyMode);\n        console.log(event.target.type);\n        let value = event.target.type === \"checkbox\" ? event.target.checked : event.target.value;\n\n        this.setState({\n            spyMode: value\n        });\n    }\n    setTheme = (event) => {\n        // console.log(event.target.textContent);\n        this.setState({\n            theme: event.target.value,\n            themeKr: event.target.textContent\n        });\n    }\n\n    updateGlobalState = () => {\n        this.props.parentCallbackState(this.state);\n    }\n\n    render() {\n        \n        // Display 게임 시작! button when the user chooses the theme.\n        let startGameButton = this.state.theme !== \"\" ? (<Link to='/game' onClick={this.updateGlobalState}>게임시작!</Link>) : ``;\n\n        return (\n            <section className=\"setting-container\">\n                <h1>설정 창</h1>\n\n                <form className=\"setting-form\">\n                    <label className=\"player-num\">\n                        <h2>참여인원:</h2>\n                        <select value={this.state.value} onChange={this.setPlayerNum}>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                            <option value=\"11\">11</option>\n                            <option value=\"12\">12</option>\n                            <option value=\"13\">13</option>\n                            <option value=\"14\">14</option>\n                            <option value=\"15\">15</option>\n                            <option value=\"16\">16</option>\n                            <option value=\"17\">17</option>\n                            <option value=\"18\">18</option>\n                            <option value=\"19\">19</option>\n                            <option value=\"20\">20</option>\n                        </select>\n                    </label>\n                    <label className=\"set-timer\">\n                        <h2>제한시간:</h2>\n                        <select value={this.state.value} onChange={this.setTimer}>\n                            <option value=\"60\">60 초</option>\n                            <option value=\"90\">90 초</option>\n                            <option value=\"120\">120 초 (2분)</option>\n                            <option value=\"150\">150 초 (2분 30초)</option>\n                            <option value=\"180\">180 초 (3분)</option>\n                            <option value=\"240\">240 초 (4분)</option>\n                            <option value=\"300\">300 초 (5분)</option>\n                            <option value=\"unlimited\">무제한</option>\n                        </select>\n                    </label>\n                    <label className=\"spy-mode\">\n                        <span className=\"caption\" style={{fontSize:1+'rem'}}>**스파이 모드는 준비 중입니다!**</span>\n                        {/* {`스파이 모드: ${this.state.spyMode}`}\n                        <input \n                            name=\"spyMode\"\n                            type=\"checkbox\"\n                            checked={this.state.spyMode}\n                            onChange={this.spyModeSelect}\n                        /> */}\n                    </label>\n                </form>\n\n                <div className=\"theme-select\">\n                    <h2>주제: {`${this.state.themeKr}`}</h2>\n                    <button value=\"food\" onClick={this.setTheme}>음식</button>\n                    <button value=\"place\" onClick={this.setTheme}>장소</button>\n                    <button value=\"occupation\" onClick={this.setTheme}>직업</button>\n                    {this.state.easterEgg === \"onnuri\" ? <button value=\"biblecharacter\" onClick={this.setTheme}>성경인물</button> : \"\"}\n                    {this.state.easterEgg === \"onnuri\" ? <button value=\"onnurichanyangteammember\" onClick={this.setTheme}>찬양팀</button> : \"\"}\n                </div>\n                \n                <div>\n                    {startGameButton}\n                </div>\n                \n            </section>\n            );\n    }\n}\n\nexport default Setting;","import React from 'react';\n\nclass Select extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerNum: null,\n            spyMode: null,\n            theme: \"\",\n            vocab: \"\",\n            liar: 1,\n            buttonDisabled: [],\n            displayStatus: \"플레이어를 선택해주세요\",\n            buttonDisabledText: \"확인했습니다!\",\n            beginGame: false,\n            showCardStatus: false,\n            easterEgg: \"\"\n        }\n    }\n\n    // Update State\n    componentWillMount = () => {\n        // TODO: Uncomment after testing. This code updates data with Global Setting\n        if (this.props.globalState.playerNum === \"\" || this.props.globalState.theme === \"\") {\n            this.setState({\n                playerNum: 3,\n                spyMode: false,\n                theme: \"food\",\n                vocab: \"\",\n                playerState: false\n            });\n        } else {\n            this.setState({\n                playerNum: this.props.globalState.playerNum,\n                spyMode: this.props.globalState.spyMode,\n                theme: this.props.globalState.theme\n            });\n        }\n        if (this.props.globalState.easterEgg !== \"\") {this.setState({easterEgg:this.props.globalState.easterEgg})};\n    }\n\n    componentDidMount = () => {\n        const chosenTheme = {\n            \"food\": require('../data/food.json'),\n            \"place\": require('../data/place.json'),\n            \"occupation\": require('../data/occupation.json'),\n            \"biblecharacter\": require('../data/biblecharacter.json'),\n            \"onnurichanyangteammember\": require('../data/onnurichanyangteammember.json')\n        }\n        let data = chosenTheme[this.state.theme].kr; // Currently only set to Korean\n\n        // Generate a random number to choose the menu\n        this.generateRandomNumber(data);\n    }\n    generateRandomNumber = (data) => {\n        let randomIndex = Math.floor(Math.random() * data.length);\n        let chooseLiar = Math.floor(Math.random() * this.state.playerNum);\n\n        this.setState({ \n            vocab: data[randomIndex],\n            liar: chooseLiar\n        });\n    }\n\n    showCard = (event) => {\n        let button = Number(event.target.id);\n        \n        if (this.state.buttonDisabled.includes(button) === false) {\n\n            this.setState({\n                buttonDisabled: this.state.buttonDisabled.concat(button)\n            });\n        }\n\n        let card = event.target.className;\n        \n        if (card.includes(\"no-liar\")) {\n            this.setState({\n                displayStatus: `당신은 라이어가 아닙니다. 이번에 선택된 단어는:`,\n                playerState: false\n            });\n        } else {\n            this.setState({\n                displayStatus: `당신은`,\n                playerState: true\n            });\n        }\n\n        // Hide player select card during check\n        this.setState({\n            showCardStatus: true\n        })\n    }\n\n    resetDisplayStatus = (event) => {\n        if (this.state.buttonDisabled.length === this.state.playerNum) {\n            // All Player has been selected\n            console.log(\"모든 플레이어가 선택 되었습니다\");\n\n            // Begin Timer\n            this.setState({ \n                displayStatus: \"게임이 시작되었습니다!\",\n                beginGame: true \n            });\n            this.props.nextStage(2);\n            this.props.setVocab(this.state.vocab);\n            \n        } else {\n            if (this.state.playerNum - this.state.buttonDisabled.length === 1) {\n                console.log(\"One player left\");\n                this.setState({buttonDisabledText: \"게임 시작!\"});\n            }\n            this.setState({displayStatus: \"플레이어를 선택해주세요\"})\n        }\n\n        // Show player select card after check\n        this.setState({\n            showCardStatus: false\n        });\n    }\n\n    render() {\n        console.log(\"render()\");\n        // console.log(\"PROPS:\", this.props);\n        let defaultText = \"선택하세요\";\n        // console.log(this.state.buttonDisabled.includes(0));\n        // console.log(\"THIS.STATE\", this.state);\n        \n        let playersCard = []\n        for (let i = 0; i < this.state.playerNum; i++) {\n            if (i === this.state.liar) {\n                playersCard.push(<button className={`playersCard liar ${this.state.buttonDisabled.includes(i) ? 'disabled' : ''}`} disabled={this.state.buttonDisabled.includes(i) ? true : false} key={i} id={i} onClick={this.showCard}>{defaultText}</button>)\n            } else {\n                playersCard.push(<button className={`playersCard no-liar ${this.state.buttonDisabled.includes(i) ? 'disabled' : ''}`} disabled={this.state.buttonDisabled.includes(i) ? true : false} key={i} id={i} onClick={this.showCard}>{defaultText}</button>)\n            }\n        }\n        console.log(this.state.buttonDisabled.length);\n        let textView;\n        if (this.state.buttonDisabled.length > 0 && this.state.showCardStatus === true) {\n            textView = this.state.playerState ? <span className=\"red\">라이어 입니다.</span> : <span className=\"green\"><br/>{this.state.vocab}</span>;\n        } else {\n            textView = null;\n        }\n        let nextButton = this.state.displayStatus === \"플레이어를 선택해주세요\" ? `` : <button onClick={this.resetDisplayStatus}>{this.state.buttonDisabledText}</button>;\n\n        return (\n            <div>\n                <div>\n                    <h2>{this.state.displayStatus} {textView}</h2>\n                    { nextButton }\n                </div>\n                {this.state.showCardStatus ? '' : playersCard }\n            </div>\n        );\n    }\n}\n\nexport default Select;","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 60,\n            unlimited: false\n        }\n        this.timer = 0;\n    }\n    componentWillMount = () => {\n        if (this.props.globalTimer === \"unlimited\") {\n            this.setState ({\n                seconds: \"시간은 무제한 입니다\",\n                unlimited: true\n            });\n            this.props.timerCheck(false);\n        } else {\n            this.setState({\n                seconds: this.props.globalTimer\n            });\n        }\n    }\n    componentDidMount = () => {\n        if (this.state.unlimited === false) {\n            this.startTimer();\n        }\n    }\n    \n    countDown = () => {\n        let seconds = this.state.seconds - 1;\n        this.setState({ seconds: seconds });\n\n        if (seconds === 0) {\n            clearInterval(this.timer);\n            this.props.timerCheck(false);\n        }\n    }\n\n    startTimer = () => {\n        this.timer = setInterval(this.countDown, 1000);\n    }\n\n    render() {\n        let timerColor = this.state.seconds <= 20 ? \"red\" : \"\";\n        return(\n            <div>\n                <p><span className={timerColor}>{this.state.seconds}</span> {this.state.unlimited ? '' : '초'}</p>\n            </div>\n        );\n    }\n}\n\nexport default Timer;","import React from 'react';\nimport Timer from './Timer';\n\nclass Play extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            displayStatus: \"게임 시작!\",\n            displayStatus02: \"게임이 시작되었습니다! 라이어를 찾아주세요!\",\n            findLiar: false\n        }\n        \n    }\n\n    checkTimerEnds = (timer) => {\n        console.log(\"Check Timer\", timer);\n        let text = \"시간이 다 되었습니다! 라이어를 지목해주세요!\"\n        if (this.props.globalTimer === \"unlimited\") {\n            text = \"준비가 되면 아래의 버튼을 선택하여 진행해주세요.\";\n        }\n        this.setState({\n            displayStatus: text,\n            displayStatus02: \"\",\n            findLiar: true\n        });\n    }\n\n    liarStatus = (status) => {\n        console.log(status.target.value);\n        switch(status.target.value) {\n            case \"liar-found\":\n                this.props.nextStage(3);\n                break;\n            case \"liar-not-found\":\n                this.props.nextStage(4);\n                break;\n            default:\n                this.props.nextStage(4);\n                break;\n        }\n        \n    }\n\n    render() {\n        let findLiarButton01 = <button key=\"1\" value=\"liar-found\" onClick={this.liarStatus}>라이어를 찾았습니다!</button>;\n        let findLiarButton02 = <button key=\"2\" value=\"liar-not-found\" onClick={this.liarStatus}>라이어를 찾지 못했습니다!</button>;\n        let findLiarButton = [findLiarButton01, findLiarButton02];\n        return (\n            <div>\n                <h1>{this.state.displayStatus}</h1>\n                <p>{this.state.displayStatus02}</p>\n                <Timer timerCheck={this.checkTimerEnds} globalTimer={this.props.globalTimer}/>\n                {this.state.findLiar ? findLiarButton.map(element => { return element}) : ''}\n            </div>\n        );\n    }\n}\n\nexport default Play;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../scss/Finish.scss';\n\nclass Finish extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            liarStatus: \"\",\n            vocab: \"\",\n            theme: \"\",\n            guessWords: [],\n            liarGuess: false,\n            liarGuessText: \"\",\n            headerText: \"라이어는 단어를 선택해주세요\",\n            liarWin: true\n        }\n    }\n\n    componentWillMount = () => {\n        this.setState({\n            liarStatus: this.props.liarStatus,\n            vocab: this.props.vocab,\n            theme: this.props.theme\n        });\n    }\n    componentDidMount = () => {\n        if (this.state.liarStatus === \"not-found\"){\n            const chosenTheme = {\n                \"food\": require('../data/food.json'),\n                \"place\": require('../data/place.json'),\n                \"occupation\": require('../data/occupation.json'),\n                \"biblecharacter\": require('../data/biblecharacter.json'),\n                \"onnurichanyangteammember\": require('../data/onnurichanyangteammember.json')\n            }\n            let data = chosenTheme[this.state.theme].kr; // Currently only set to Korean\n            this.setState({guessWords: this.state.guessWords.concat(data)});\n        } else {\n            this.setState({\n                headerText: \"축하합니다. 라이어를 잡았습니다!\",\n                liarGuess: true\n            });\n        }\n        \n    }\n\n    liarGuess = (guess) => {\n        console.log(guess.target.value, this.state.vocab);\n        if (guess.target.value === this.state.vocab) {\n            this.setState({\n                liarGuessText: \"축하합니다! 선택한 단어가 맞습니다!\",\n                headerText: \"라이어 승\",\n                liarWin: true\n            });\n        } else {\n            this.setState({\n                liarGuessText: `아쉽습니다! 선택한 단어가 틀렸습니다! 선택된 단어는: ${this.state.vocab}`,\n                headerText: \"라이어 패\",\n                liarWin: false\n            });\n        }\n        this.setState({\n            liarGuess: true,\n        });\n    }\n    \n    render() {\n        console.log(this.state);\n        let guessCards = this.state.guessWords.map(word => {return <button className=\"guess-cards\" key={word} value={word} onClick={this.liarGuess}>{word}</button>})\n        let newGame = <Link to='/setting'>새 게임하기</Link>\n        console.log(this.state.liarGuess);\n        let headerColor = 'white'\n        if (this.state.liarGuess) {\n            headerColor = this.state.liarWin ? 'green' : 'red';\n        }\n        return (\n            <div className=\"finish-container\">\n                <h2 className={headerColor}>{this.state.headerText}</h2>\n                <p>{this.state.liarGuessText}</p>\n                <div className=\"guess-card-container\">{this.state.liarGuess ? newGame : guessCards}</div>\n            </div>\n        );\n    }\n}\n\nexport default Finish;","import React from 'react';\nimport Select from './Select';\nimport Play from './Play';\nimport Finish from './Finish';\nimport '../scss/Game.scss';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerNum: null,\n            timer: null,\n            spyMode: null,\n            theme: \"\",\n            stage: 1,\n            vocab: \"\",\n            easterEgg: \"\"\n        }\n    }\n\n    componentWillMount = () => {\n        // TODO: Uncomment after testing. This code updates data with Global Setting\n        if (this.props.globalState.playerNum === null && this.props.globalState.theme === \"\") {\n            this.setState({\n                playerNum: 3,\n                timer: \"unlimited\",\n                spyMode: false,\n                theme: \"food\"\n            });\n        } else {\n            this.setState({\n                playerNum: this.props.globalState.playerNum,\n                timer: this.props.globalState.timer,\n                spyMode: this.props.globalState.spyMode,\n                theme: this.props.globalState.theme,\n            });\n        }\n        if (this.props.globalState.easterEgg !== \"\") {this.setState({easterEgg:this.props.globalState.easterEgg})};\n    }\n\n    progressNextStage = (stage) => {\n        this.setState({stage: stage});\n    }\n\n    updateGlobalVocab = (vocab) => {\n        this.setState({vocab: vocab});\n    }\n\n    render() {\n        let gameView;\n\n        switch(this.state.stage) {\n            case 1:\n                gameView = <Select globalState={this.state} nextStage={this.progressNextStage} setVocab={this.updateGlobalVocab}/>;\n                break;\n            case 2:\n                gameView = <Play nextStage={this.progressNextStage} globalTimer={this.state.timer}/>;\n                break;\n            case 3:\n                gameView = <Finish nextStage={this.progressNextStage} liarStatus='found' vocab={this.state.vocab} theme={this.state.theme} />\n                break;\n            case 4:\n                gameView = <Finish nextStage={this.progressNextStage} liarStatus='not-found' vocab={this.state.vocab} theme={this.state.theme} />\n                break;\n        }\n\n        return (\n            <div>\n                {/* <h1>게임화면</h1> */}\n                { gameView }\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.scss';\n\nimport Intro from './Components/Intro';\nimport Setting from './Components/Setting';\nimport Game from './Components/Game';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerNum: null,\n      timer: null,\n      spyMode: false,\n      theme: \"\",\n      easterEgg: \"\"\n    }\n  }\n\n  activateEasterEgg = (code) => {\n    this.setState({\n      easterEgg: code\n    });\n  }\n\n  updateGlobalState = (setting) => {\n    this.setState({\n      playerNum: setting.playerNum,\n      timer: setting.timer,\n      spyMode: setting.spyMode,\n      theme: setting.theme\n    });\n  }\n\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <Route exact path=\"/\" render={(props) => <Intro parentCallbackEasterEgg={this.activateEasterEgg} {...props} />} />\n          <Route path=\"/setting/\" render={(props) => <Setting parentCallbackState={this.updateGlobalState} globalState={this.state} {...props} />} />\n          <Route path=\"/game/\" render={(props) => <Game globalState={this.state} {...props}/>} />\n        </div>\n      </HashRouter>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './Main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}